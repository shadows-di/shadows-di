Hi3519V101/Hi3516AV200 SDK 安装以及升级使用说明


说明：本文以Hi3519V101描述为例，如未有特殊说明，Hi3516AV200与Hi3519V101完全一致。


第一章 Hi3519V101_SDK_Vx.x.x.x版本升级操作说明
   如果您已安装过SDK，请直接参看第三章。
    
第二章 首次安装SDK
1、Hi3519V101 SDK包位置
    在"Hi3519***/01.software/board"目录下，您可以看到一个 Hi3519V101_SDK_Vx.x.x.x.tgz 的文件，
该文件就是Hi3519V101 的软件开发包。

2、解压缩SDK包
    在linux服务器上（或者一台装有linux的PC上，主流的linux发行版本均可以），使用命令：tar -zxf Hi3519V101_SDK_Vx.x.x.x.tgz ，
解压缩该文件，可以得到一个Hi3519V101_SDK_Vx.x.x.x目录。

3、展开SDK包内容
    返回Hi3519V101_SDK_Vx.x.x.x目录，运行./sdk.unpack(请用root或sudo权限执行)将会展开SDK包打包压缩存放的内容，请按照提示完成操作。
如果您需要通过WINDOWS操作系统中转拷贝SDK包，请先运行./sdk.cleanup，收起SDK包的内容，拷贝到新的目录后再展开。

4、在linux服务器上安装交叉编译器
    1）安装uclibc交叉编译器（注意，需要有sudo权限或者root权限）：
       进入Hi3519V101_SDK_Vx.x.x.x/osdrv/opensource/toolchain/arm-hisiv500-linux目录，运行chmod +x arm-hisiv500-linux.install，然后运行./arm-hisiv500-linux.install即可。
    2) 安装glibc交叉编译器（注意，需要有sudo权限或者root权限）：
       进入Hi3519V101_SDK_Vx.x.x.x/osdrv/opensource/toolchain/arm-hisiv600-linux目录，运行chmod +x arm-hisiv600-linux.install，然后运行./arm-hisiv600-linux.install即可。
    3) 执行source /etc/profile， 安装交叉编译器的脚本配置的环境变量就可以生效了，或者请重新登陆也可。

5、编译osdrv
    参见osdrv目录下readme

6、SDK目录介绍
Hi3519V101_SDK_Vx.x.x.x 目录结构如下：    
    |-- sdk.cleanup                 # SDK清理脚本
    |-- sdk.unpack                  # SDK展开脚本
    |-- osdrv                       # 存放操作系统及相关驱动的目录
    |   |-- opensource              # opensource源代码
    |   |   |-- busybox             # busybox源代码
    |   |   |-- kernel              # linux内核源代码
    |   |   |-- toolchain           # 交叉编译器
    |   |   |-- uboot               # uboot源代码
    |   |-- pub                     # 编译好的镜像、工具、drv驱动等
    |   |-- tools                   # linux工具源代码
    |   |-- readme_cn.txt           # osdrv使用说明（中文版）
    |   |-- readme_en.txt           # osdrv使用说明（英文版）
    |   |-- ......                  # 
    |   |-- Makefile                # osdrv Makefile
    |-- osal                        # 存放操作系统适配层的头文件和源文件的目录
    |   |-- include                 # 存放操作系统适配层的头文件的目录
    |   |-- source                  # 存放操作系统适配层的源文件的目录
    |-- package                     # 存放SDK各种压缩包的目录
    |   |-- osdrv.tgz               # linux内核/uboot/rootfs/tools源码压缩包
    |   |-- osal.tgz                # 操作系统适配层源码压缩包
    |   |-- mpp_*.tgz               # 媒体处理平台软件压缩包
    |   |-- drv.tgz                 # drv压缩包
    |   |-- image_*                 # 可供FLASH烧写的映像文件(如内核、根文件系统)和rootfs的压缩包
    |-- scripts                     # 存放shell脚本的目录
    |-- drv                         # drv目录
    |   |-- extdrv                  # 板级外围驱动源代码
    |   |-- interdrv                # mipi,rtc,cipher等驱动源代码 
    |-- mpp_single                  # 存放单核媒体处理平台的目录
    |   |-- component               # 组件源代码 
    |   |-- init                    # 内核模块的初始化源代码
    |   |-- obj                     # 内核模块的obj文件
    |   |-- include                 # 对外头文件
    |   |-- ko                      # 内核模块
    |   |-- lib                     # release版本库以及音频库
    |   |-- Makefile.param          # mpp一些全局编译选项
    |   |-- Makefile                # mpp的Makefile
    |   |-- linux.param             # mpp一些跟操作系统相关的全局编译选项
    |   |-- tools                   # 媒体处理相关工具
    |   |-- sample                  # 样例源代码
    |-- mpp_big-little              # 存放big-little双核媒体处理平台的目录

第三章、安装、升级Hi3519V101/Hi3516AV200 DEMO板开发环境
     # 如果您使用Hi3519V101/Hi3516AV200 的DEMO板，可以按照以下操作烧写uboot、内核以及文件系统，以下操作均使用网络来更新。
      1、如果您拿到的单板没有uboot，就需要使用Hi3519***/01.software/pc/HiTool进行烧写。更详细的烧写操作步骤及说明，请参见01.software\pc\HiTool目录下的《HiBurn 工具使用指南》。
      2、如果您拿到的单板中已经有uboot，可以按照以下步骤使用网口烧写uboot、kernel及rootfs到Flash中。DEMO板默认为从SPI Flash启动。
    
    
1、配置tftp服务器
    # 可以使用任意的tftp服务器，并将package/image_uclibc_xxx(或image_glibc_xxx)下的相关文件拷贝到tftp服务器目录下。
    
2、参数配置
    # 单板上电后，敲任意键进入u-boot。设置serverip（即tftp服务器的ip）、ipaddr（单板ip）和ethaddr（单板的MAC地址）。
    setenv serverip xx.xx.xx.xx
    setenv ipaddr xx.xx.xx.xx 
    setenv ethaddr xx:xx:xx:xx:xx:xx
    setenv netmask xx.xx.xx.xx
    setenv gatewayip xx.xx.xx.xx
    ping serverip，确保网络畅通。

3、烧写映像文件到SPI Flash
    以16M SPI Flash为例。
    1）地址空间说明
        |      1M       |      3M       |      12M      |
        |---------------|---------------|---------------|
        |     boot      |     kernel    |     rootfs    |

        以下的操作均基于图示的地址空间分配，您也可以根据实际情况进行调整。
    2）烧写u-boot
        mw.b 82000000 ff 100000
        tftp 0x82000000 u-boot-hi3519.bin
        sf probe 0
        sf erase 0 100000
        sf write 82000000 0 100000	
        reset
		请注意，reset之后需要重新设置网络参数。
    3）烧写内核
        mw.b 82000000 ff 300000
        tftp 82000000 uImage_hi3519
        sf probe 0
        sf erase 100000 300000
        sf write 82000000 100000 300000
    4)烧写文件系统
        mw.b 82000000 ff C00000
        tftp 0x82000000 rootfs_hi3519_64k.jffs2
        sf probe 0
        sf erase 400000 C00000
        sf write 82000000 400000 C00000
    5）设置启动参数（注意linux-3.18.y kernel默认文件系统只读，需要在bootargs中加入rw选项，文件系统才可读写）
        setenv bootargs 'mem=64M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 rw mtdparts=hi_sfc:1M(boot),3M(kernel),12M(rootfs)'
        setenv bootcmd 'sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000'
        sa


4、烧写映像文件到NAND Flash		
   以64M NAND Flash为例。
    1）地址空间说明
        |      1M       |     3M        |     32M       |         28M            |
        |---------------|---------------|---------------|------------------------|
        |     boot      |    kernel     |    rootfs     |        other           |

        以下的操作均基于图示的地址空间分配，您也可以根据实际情况进行调整。
    2）烧写u-boot
        mw.b 82000000 ff 100000
        tftp 82000000 u-boot-hi3519.bin
        nand erase 0 100000
        nand write 82000000 0 100000
        reset
		请注意，reset之后需要重新设置网络参数。
    3）烧写内核
        mw.b 82000000 ff 300000
        tftp 82000000 uImage_hi3519 
        nand erase 100000 300000
        nand write 82000000 100000 300000
    4)烧写文件系统
        mw.b 82000000 ff 2000000
        tftp 82000000 rootfs_hi3519_2k_4bit.yaffs2
        nand erase 400000 2000000
        nand write.yaffs 82000000 400000  96d200    #注意：96d200为rootfs文件实际大小（16进制）
    5）设置启动参数（注意linux-3.18.y kernel默认文件系统只读，需要在bootargs中加入rw选项，文件系统才可读写）
	setenv bootargs 'mem=64M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=yaffs2 rw mtdparts=hinand:1M(boot),3M(kernel),32M(rootfs),28M(test)'
        setenv bootcmd 'nand read 0x82000000 0x100000 0x300000;bootm 0x82000000'
        sa
		
5、启动新系统
    reset	# 重启进入新系统。

第四章、开发前环境准备

1、管脚复用
	无。
    
第五章、使用SDK和DEMO板进行开发
1、开启Linux下的网络
    # 设置网络
    ifconfig eth0 hw ether xx:xx:xx:xx:xx:xx;
    ifconfig eth0 xx.xx.xx.xx netmask xx.xx.xx.xx;
    route add default gw xx.xx.xx.xx
    # 然后ping一下其他机器，如无意外，网络将能正常工作。

2、使用NFS文件系统进行开发
    # 在开发阶段，推荐使用NFS作为开发环境，可以省去重新制作和烧写根文件系统的工作。
    # 挂载NFS文件系统的操作命令：
    mount -t nfs -o nolock -o tcp -o rsize=32768,wsize=32768 xx.xx.xx.xx:/your-nfs-path /mnt
    # 然后就可以在/mnt目录下访问服务器上的文件，并进行开发工作。

3、开启telnet服务
    # 网络正常后，运行命令 telnetd& 就可以启动单板telnet服务，然后才能使用telnet登录到单板。

4、运行MPP业务
    # 在单板linux系统下，进入mpp/ko目录，加载驱动
    cd mpp_xxx/ko
    # default online
    ./load3519v101 -a -sensor0 imx274 -osmem 64
    ./load3519v101 -a -sensor0 imx226 -offline -osmem 128 -total 1024
    Hi3519V101在online模式下只支持一个sensor。
	
    # vi_vpss offline
    ./load3519v101 -a -sensor0 ov4689 -sensor1 ov4689 -osmem 64 -offline -workmode double_pipe
    Hi3519V101在offline模式支持两个sensor输入。分别由-sensor0和-sensor1指定所使用的sensor型号。如果只使用一个sensor，可以只指定-sensor0或-sensor1其中一个，另外一个不需要指定。
    -workmode选项表示两个VI设备的工作模式，可以选择stitching、double_pipe或single_pipe，double_pipe表示两个VI设备处于double_pipe拍照模式，stitching表示两个VI设备处于双路拼接模式，
    single_pipe表示两个VI设备单独工作。默认为single_pipe模式。

    # 进入各sample目录下执行相应样例程序(sample需要先在服务器上成功编译过)
    cd mpp_xxx/sample/vio
    ./sample_vio 0 1
    
第六章 地址空间分配与使用
1、DDR内存管理说明
    1）所有DDR内存中，一部分由操作系统管理，称为OS内存；另一部分由osal模块管理，供媒体业务单独使用，称为MMZ内存。
    2）OS内存起始地址为0x80000000，内存大小可通过bootargs进行配置，例如第三章中的setenv bootargs 'mem=64M ... ',表示分配给操作系统内存为64M，您可以根据实际情况进行调整。
    3）MMZ内存由osal内核模块管理（mpp/ko目录下的hi_osal.ko），加载osal模块时，通过模块参数指定其起始地址及大小，load脚本中根据total和osmem大小来进行计算，例如：
    ./load3519v101 -a -sensor0 imx226 -osmem 64
    
    您也可以通过修改mpp_xxx/ko目录下load3519v101脚本中的osal模块参数，来修改其起始地址和总大小。
    4）请注意MMZ内存地址范围不能与OS内存重叠。

2、DEMO板DDR内存管理示意
    以容量为128MBytes的DDR内存为例，以下为根据本文档和SDK默认配置得到的内存管理示意图：
    
    DDR:                                                           
    
    -----|-------|  0x80000000   # Memory managed by OS.              
    64M  | OS    |                                                 
         |       |                                                 
    -----|-------|  0x84000000   # Memory managed by MMZ block anonymous.          
    64M  | MMZ   |                                                 
         |       |                                                 
    -----|-------|  0x88000000   # Memory managed by MMZ block.                       
             
    
    注意：
	（1）用户在配置启动参数时需要设置OS的管理内存为64M，“setenv bootargs 'mem=64M ...”。	  
	（2）系统启动后，加载时指定osmem为64(-osmem 64)，默认内存总大小512M，则MMZ管理的内存为448M;
	（3）如果有特殊应用，可以自行修改load3519v101脚本，进行mmz区域划分，如“insmod hi_osal.ko mmz=anonymous,0,0x82000000,30M:jpeg,0,0x83E00000,2M： anony=1”。    